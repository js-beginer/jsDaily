var articles = [{
	'article_id': 'a01',
	'stage': '1.Angular 意识也意味这 Angular 意识到所有的发送到服务端的 XHR，从而能够避免页面加载过程中随机间隔时间等待。场到目前，我们已经对 AngularJS 的组成做了一点点研究。现在我们知道了如何从用户和应用获取数据，过滤，设置修改 DOM。但是我们如何把他们组织在一起,我们推荐你的项目中使用 Yeoman，它会创所有必要的文件用来阴道你的 AngularJS 应用。'
}, {
	'article_id': 'a02',
	'stage': '2.Yeoman 是一个有多个框架和客户端库构成的强大工具。它通过自动化一些需要引导的日常任务和开发应用提供了一个快速开发环境。我们会在这章中通过一整节介绍如何安装和使用 Yeoman，单在那之前，我们会简单的接触下 Yeoman 命令行，代替手动执行哪些操作。标识符，控制器和服务同样放在 app/scripts 下，如果它们是正规和复杂的，那么既可以是完整的文件(directives.js,filters.js,services.js)，也可以是单独地。'
}, {
	'article_id': 'a03',
	'stage': '3.还有一个重要的模板文件，就是入口 app/index.html。这个对管理 AngularJS 源文件有重大作用，也对你为应用创建的任何源文件有重大意义。如果你创建了一个 JS 文件，确保你把它添加到 index.html 中了，以及也更新了主模块和路由（Yeoman 同样能为你做这些）。AngularJS 尝试通过一个场景运行器模拟用户和医用交互，换来缓解这个问题'
}, {
	'article_id': 'a04',
	'stage': '4.当谈到 AngularJS 时，测试是超级重要的，并且毫不费力。用测试的观点来看，test/spec文件夹应该是映射 app/scripts。每个文件应该有一个有单元测试的映射说明文件。种子为每个控制器文件，在 test/spec/controllers 目录下，和原始控制器具有同样的名称。这些是Jasmine 风格说明，为控制器的每个期望的行为描述了一个规范。'
}, {
	'article_id': 'a05',
	'stage': '5.虽然 E2E 测试可能看上去有点想 Jasmin，但是它们不是。它们就是一些函数，通过 Angular Scenario Runner 在未来某一时刻异步的执行。因此不要期望能够做像你在一个正常的 Jasmin 测试（像 console.log 重复打印值）中那样做。还有一个简单的 HTML 文件在浏览器中可以自己打开，然后手动的运行测试用例。虽然Yeoman 并不为这些生成存根，但是它们遵循了类似的单元测试风格。'
}, {
	'article_id': 'a06',
	'stage': '6.有两个配置文件是必须的。第一个是，karma.conf.js，Yeoman 为你生成的，用于运行单元测试。第二个是 karma.e2e.conf.js，它不是 Yeoman 生成的。这个常用于场景测试。在本章的最后，和 RequireJS 集成章节，有一个示例文件。这些配置详细描述了当使用 Karma 运行这些但愿测试时用的依赖和文件。默认情况下，它运行在 Karma 服务器的 9876 端口。'
}, {
	'article_id': 'a07',
	'stage': '7.你可能会问：我如何运行应用程序？如何运行单元测试？我甚至如何编写刚才讨论的这些多种多样的片段？年轻人，不要担心。在这一章，我们会处理建立你的工程以及开发环境，以便这些东西能够迅速移动，一旦我们搅动了一些可怕的代码。写什么样的代码，以及如何组织它们形成最终的应用，这些将会在下面几张中讲述。'
}, {
	'article_id': 'a08',
	'stage': '8.WebStorm，如果你不介意花几块钱的话（但是有 30 天体验），那么最近由 JetBrains 开发的 WebStorm 提供了最全面的 Web 开发平台。它很多特性，之前只能是指定类型语言可用，包括对多个类库和框架的代码补全（在哪个浏览器上，如图 3-1），代码导航，语法，错误高亮以及盒子模型支持。此外，还有一些不错的集成，虽然在 Chrome 中执行但是能够在 IDE 上执行。'
}, {
	'article_id': 'a09',
	'stage': '9.注意，我们已经使用了来自 HTML5 的 required 属性，email 类型、number 类型的输入框，在一些字段上做我们的校验。这个能和 Angular 很好的运行，在老版本的非 HTML5 浏览器，Angular 会用相同功能的标识符来填充这些。然后，给表单添加控制器，处理由表单变化的提交请求，来引用这个控制器。'
}, {
	'article_id': 'a10',
	'stage': '10.Angular 自动用几个适合于单页面应用的很好特性改善了<form>元素。特性之一就是，只有当整套元素合法时，Angular 才让你为表单中的输入框申明合法状态以及允许提交表单。例如，如果我们创建一个注册表单，表单中需要输入一个名称和 email，但是有个可选的年龄字段，在用户提交到服务端之前我们能够校验多个用户属性。'
}, {
	'article_id': 'a11',
	'stage': '11.你应该慎重的考虑到 WebStrom 支持 AngularJS 开发的最大理由是它是仅有的支持AngularJS 插件的 IDE 之一。对于 HTML 模板中的 AngularJS HTML 标签，插件能够给你自动补全支持。此外，它支持最酷的事情之一是内置模板的概念。这些是为公共代码片预置的模板，否则的话你会每次重头开始。因此而不是输入以下内容：'
}, {
	'article_id': 'a12',
	'stage': '12.现在让我们讨论讨论我们如何获取我们的应用在浏览器中的有效荷载。为了获取到应用如何运作的实际感触，我们需要有一个 web 服务器来提供 HTML 和 JavaScript 代码。我们会探讨两种方式：一种是简单的方法，用 Yeoman 运行应用程序；另外一种并不容易，但是一样的好，不使用 Yeoman。就是那样，你应该在你运行命令行的控制台上得到了输出结果。是不是很简单？'
}, {
	'article_id': 'a13',
	'stage': '13.这个将启动端口为 9876 的 Karma 服务器（你可以从之前的步骤中修改 karma.conf.js 文件，来改变这个默认值）。虽然 Karma 应该能自动的打开浏览器并自动捕获，但是它会在控制台打印所有需要捕获另外一个浏览器的指令。如果你懒得做这个，那么只管在另外一个浏览器或设备中输入 http://localhost:9876，然后在多个浏览器中运行测试用例。'
}, {
	'article_id': 'a14',
	'stage': '14.正如你所看到的，它本身有着高可阅读的格式，因为大多数代码可以用纯英文理解。它也提供了非常多样的、功能强大的匹配符（比如 expect），当然也有 setUp 和 tearDowns 的xUnit 这样的东西（在每一个单个测试用例中执行前后调用的函数）。AngularJS 提供了一些非常好的原型以及测试函数，允许你在单元测试中创建服务，控制器和过滤器，以及模拟出 HttpRequests。我们将会在第五章详述。'
}, {
	'article_id': 'a15',
	'stage': '15.这点是所有 TDD 开发人员梦想的：能够运行他们所有的测试用例，每次他们保存，在几毫秒，能够很快的获取到结果。这个在用 AngularJS 和 Karma 很容易做到。结果是，Karma配置文件（还记得之前的的 karma.confi.js 文件？）有一个看似平淡的”auto Watch”标志。把它设置成 true，每当它监视的文件（代码和测试代码）发生变化时 Karma 就会运行测试用例。如果你从 IDE 中运行 karma star，猜猜会有是什么样？'
},{
	'article_id': 'a16',
	'stage': '16.当你使用 JavaScript 时，在浏览器中调试代码将变成第二种选择。你越早的接受，你将受益越多。值得庆幸的是，这些已走过很长的一段路，由于当时还没有 Firebug。现在，无论哪种浏览器，通常使用一些东西进入你的代码，分析你的错误，分析出应用的状态。现在知道了在 Chrome 和 IE 上有开发者工具；Firebug 可以在 firefox 和 chrome 运行。'
}, {
	'article_id': 'a17',
	'stage': '17.对于一个简单的应用，控制器和服务不会有超过一两个的依赖。但是在现实中、大规模应用中，如果没有合适的工具支持，服务依赖管理可能变得一团糟。这里 Batarang 能够为你提供服务，填补了这个空缺，因为它给你提供了一个整齐的，简单的方式是可视化化了服务依赖关系图（如图 3-4）'
}, {
	'article_id': 'a18',
	'stage': '18.还有一个重要的模板文件，就是入口 app/index.html。这个对管理 AngularJS 源文件有重大作用，也对你为应用创建的任何源文件有重大意义。如果你创建了一个 JS 文件，确保你把它添加到 index.html 中了，以及也更新了主模块和路由（Yeoman 同样能为你做这些）。AngularJS 尝试通过一个场景运行器模拟用户和医用交互，换来缓解这个问题'
}, {
	'article_id': 'a19',
	'stage': '19.我们已经看到使用 Karma 是多么的简单地启动和运行测试。最后，只需要两个命令运行你所有的单元测试。Yeoman 让它更简单（只要你相信它）。每当你用 Yeoman 生成一个文件，它同时会为你创建一个可填充的测试存根。一旦你安装了 Karma，用 Yeoman 运行测试就像运行下面的命令一样简单'
}, {
	'article_id': 'a20',
	'stage': '20.虽然 E2E 测试可能看上去有点想 Jasmin，但是它们不是。它们就是一些函数，通过 Angular Scenario Runner 在未来某一时刻异步的执行。因此不要期望能够做像你在一个正常的 Jasmin 测试（像 console.log 重复打印值）中那样做。还有一个简单的 HTML 文件在浏览器中可以自己打开，然后手动的运行测试用例。虽然Yeoman 并不为这些生成存根，但是它们遵循了类似的单元测试风格。'
}];
